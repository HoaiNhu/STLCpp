//Hàm chuyển thập phân thành nhị phân
//(,) sau mỗi lần chạy, (q/) chứa chuỗi kí tự hiện tại
vector<string> generateBinary(int n) //n=5
{
    vector<string> res; //1, 10, 11, 100, 101
	queue<string>q; //1 /1, 10, 11/ 10, 11, 100, 101/ 11, 100, 101, 110, 111/ 100, 101, 11o, 111/ 100, 101, 110, 111, 1000, 1001/ 101, 110, 111, 1000, 1001, 1010, 1011
	q.push("1");
	while(n--){ //neu n-- != 0
        q.push(q.front() + "0"); 
        //10, 100, 110, 1000, 1010
        q.push(q.front() + "1");
        //11, 101, 111, 1001, 1011
        res.push_back(q.front()); //1, 10, 11, 100, 101
        q.pop();                  //1, 10, 11, 100, 101 
	}
    return res;
}

//Hàm tìm dãy số siêu nguyên tố(số nguyên tố bỏ từng số cuối vẫn là số nguyên tố)


bool isPrime(int a)
{
    if(a < 2) return false;
    for(int i = 2; i <= sqrt(a); i++)
    {
        if(a % i == 0) return false;
    }
    return true;
}

std::vector<int> superPrimeNumber(int n)
{
    vector<int> v; //lưu kết quả
    queue<int> q;
    for(int i = 2; i <=n, i < 10; i++)
    {
        if(isPrime(i))
        {
            q.push(i);
        }
    }
    while(!q.empty())
    {
        for(int i = 1; i <= 9; i++)
        {
            int k = q.front()*10 + i;
            if(k <= n && isPrime(k))
            {
                q.push(k);
            }
        }
        v.push_back(q.front());
        q.pop();
    }
    return v;
}

