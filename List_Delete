Nếu như hàm push_back() dùng để thêm một phần tử và cuối vector, thì hàm pop_back() (có độ phức tạp là O(1)) sẽ dùng để xóa phần tử cuối cùng trong vector.

Nếu Nếu như hàm push_front() dùng để thêm một phần tử và đầu vector, thì hàm pop_front() (có độ phức tạp là O(1)) sẽ dùng để xóa phần tử đầu tiên trong vector.

Ví dụ:

	//a = [1,2,3,4,5]
	a.pop_back();	// a = [1,2,3,4]
	a.pop_back();   // a = [1,2,3]
	a.pop_front();   // a = [2,3]
	a.pop_front();   // a = [3]

-----------------------------------------------------------------
//Hàm xóa ptu đầu tiên và ptu cuối cùng

list<int> deleteFrontBack(list<int> l) 
{
    l.pop_back();
    l.pop_front();
    return l;
}

vector<int> verifyFunction(vector<int> v) {
	list<int> l(v.begin(), v.end());
	l = deleteFrontBack(l);
	vector<int> ans(l.begin(), l.end());
	return ans;
}
-------------------------------------------------------------
//Hàm xóa từ số thứ first đến số thứ last
list<int> changeValue(list<int> l, int first, int last) {
	list<int>:: iterator it = l.begin();
	advance(it, first-1); //thứ tự: first
	list<int>:: iterator it2 = l.begin();
	advance(it2, last); //thứ tự: last +1
	l.erase(it, it2);// xoá từ phần tử thứ tự first đến phần từ có thứ tự đứng trước last+1
    return l;
}

std::vector<int> verifyFunction(std::vector<int> v, int first, int last)
{   
    list<int> l(v.begin(), v.end());
    l = changeValue(l, first, last);
    vector<int> vec(l.begin(), l.end());
	return vec;
}

-------------------------------------------------------------
Để xóa tất cả phần tử có giá trị nào đó trong list ta dùng hàm remove() (độ phức tạp O(n)).

Ví dụ như muốn xóa tất cả phần tử có giá trị x trong list a, ta làm như sau.

	a.remove(x);
---------------------
//Hàm xóa phần tử n trong list

list<int> removeElements(list<int> linkedList, int n) {
	linkedList.remove(n);
    return linkedList;
}

vector<int> verifyFunction(vector<int> v, int n) {
	list<int> l(v.begin(), v.end());
	l = removeElements(l, n);
	vector<int> vec(l.begin(), l.end());
	return vec;
}

--------------------------------------------------------------
Để xóa phần tử trong list ta dùng hàm erase() (độ phức tạp bằng số phần tử cần xóa).

Muốn xóa phần tử ở interator it, ta làm như sau:

	a.erase(it);
 

Muốn xóa phần tử thứ k trong list a, ta làm như sau.

	list<int>:: iterator it = a.begin();
	advance(it,k-1);
	a.erase(it);
 

Muốn xóa một lúc nhiều số, ta làm như sau:

	a.erase(iteratorFirst,iteratorLast);
 

Ví dụ như muốn xóa phần tử thứ x đến phần tử thứ k (k≥x) trong list a, ta làm như sau:

	list<int>:: iterator it = a.begin();
	advance(it,x-1);

	list<int>:: iterator it2 = a.begin();
	advance(it2,k);

	a.erase(it1, it2);

------------------------------------------------
//Hàm xóa phần tử >= n

list<int> removeElements(list<int> linkedList, int n) {
    for(list<int>:: iterator it = linkedList.begin(); it != linkedList.end(); it++)
    {
        if(*it >= n)
        {
            it = linkedList.erase(it);
            it--;
        }
    }
    return linkedList;

}

or
list<int> removeElements(list<int> linkedList, int n) {
//     list<int>:: iterator i = linkedList.begin(), j;
//     for(; i != linkedList.end(); i++)
//     {
//         if(*i >= n)
//         {
//             j = i;
//             i--;
//             linkedList.erase(j);

//         }
//     }
//     return linkedList;

// }


vector<int> verifyFunction(vector<int> v, int n) {
	list<int> l(v.begin(), v.end());
    l = removeElements(l, n);
    vector<int> vec(l.begin(), l.end());
	return vec;
}
