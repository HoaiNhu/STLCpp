Cho một mảng các số nguyên arr và một số nguyên dương k. Hãy viết hàm trả về các phần tử âm đầu tiên trong cửa số k. Nếu không tồn tại số âm nào output 0. Xem ví dụ để hiểu rõ đề bài hơn.

Ví dụ:

Với arr = [-8 2 3 -6 10], k = 2 thì các cửa số lần lượt chứa các giá trị: [-8, 2], [2, 3], [3, -6], [-6, 10] nên kết quả trả về sẽ có dạng firstNegative(arr, k) = [-8, 0, -6, -6]

//Hàm
vector<int> firstNegative(vector<int> a, int k)
{
    queue<int> q; //lưu chỉ số phần tử âm trong cửa sổ

    int n = a.size();
//Kiểm tra xem từ phần tử bắt đầu đến phần tử gần cuối của cửa sổ đầu tiên
//         //có phần tử nào âm thì thêm vào hàng đợi
    for(int i = 0; i < k - 1; i++)
    {
        if(a[i] < 0)
            q.push(i);
    }

    vector<int> res;
    for(int i = k - 1; i < n; i++)
    {
        if(a[i] < 0) q.push(i);
        while(!q.empty() && q.front() < i - k + 1) //kiểm tra và loại bỏ phần tử đầu hàng nếu chúng ko còn nằm trong cửa sổ. vd i = 3, thì cửa sổ hiện tại là từ i -k + 1 = 2 -> i = 3. q.front() = 0 ko nằm trong cửa sổ này -> loại
            q.pop(); //Nếu như trong cửa sổ hiện tại xuất hiện số âm thì các phần tử sau đó trong cửa sổ hiện tại đều vi phạm điều kiện này
        res.push_back(q.empty() ? 0 : a[q.front()]);
    }
    return res;
}
