//Hàm mã hóa kí tự trong chuỗi
using namespace std;

string EncodeString(string s)
{
   string kq;
   int dem = 1;
   for(int i = 0; i < s.length(); i++)
   {
        if(s[i] == s[i + 1])
        {
            dem++;
        }
        else
        {
            kq += s[i];
            kq += to_string(dem);
            dem = 1;
        }
   }
   return kq;
}

////Hàm khác
using namespace std;

string encodeString(string s)
{
    stack<char> st;
    s = s + '@'; //thêm @ vào cuối chuỗi -> giúp xử lí hết tất cả kí tự trong chuỗi
    string str ="";
    for(int i = 0; i < s.length(); i++)
    {
        if(st.empty() || st.top() == s[i])
        {
            st.push(s[i]);
        }
        else
        {
            int count = 0;
            str = str + st.top();
            while(!st.empty()) //đếm số lượng kí tự đã đẩy ra khỏi ngăn xếp
            {
                count++;
                st.pop();
            }

            str = str + to_string(count);
            st.push(s[i]);
            count = 1;
        }
    }
    return str;
}
---------------------------------------------------------
//Hàm giải mã mã hóa
void repeat(stack <char> &ms, string str, int num)
{
    string res = "";
    for (int i = 0; i < num; i++)
        for (auto x : str)
        	ms.push(x);
}

std::string decodeString(std::string s)
{
    stack <char> ms;
    for (auto x : s)
    {
        if (x == ']')
        {
            string chr; //lưu kí tự bên trong []
            string ans = ""; //lưu kết quả
            int num = 0, base = 1;
            while (ms.top() != '[') //lấy ra kí tự trc [
            {
                chr = ms.top();
                ms.pop();
                ans = chr + ans;
            }
            ms.pop();
            while (!ms.empty() && '0' <= ms.top() && ms.top() <= '9')
            {
                num += (ms.top() - '0')*base;
                base *= 10;
                ms.pop();
            }
            repeat(ms, ans, num);
        }
        else
            ms.push(x);
    }
    string res = "";
    while(!ms.empty())
	{
		char x = ms.top();
    	res.push_back(x);
    	ms.pop();
	}
	reverse(res.begin(), res.end());
    return res;
}
